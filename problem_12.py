import time

from termcolor import colored, cprint

from utilities import integer_factorization

# Problem 12: Highly divisible triangular number
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
#
#           1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#
#        1: 1
#        3: 1,3
#        6: 1,2,3,6
#       10: 1,2,5,10
#       15: 1,3,5,15
#       21: 1,3,7,21
#       28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?


i = 1
triangular_number = 0
largest = 1
while True:
    triangular_number += i

    factors = integer_factorization(triangular_number)

    length = len(factors)
    if length > largest:
        largest = length
        cprint('[{}] {}: {}'.format(colored(time.clock(), 'cyan'),
                                    colored(triangular_number, 'yellow'),
                                    colored(length, 'yellow')))

    if length == 500:
        cprint(i, 'green')
        break
    i += 1


# [1.12] 83160: 128
# [1.66] 110880: 144
# [2.92] 166320: 160
# [4.4] 221760: 168
# [6.07] 277200: 180
# [7.9] 332640: 192
# [14.39] 498960: 200
# [16.85] 554400: 216
# [22.08] 665280: 224
# [24.83] 720720: 240
# [44.95] 1081080: 256
# [68.73] 1441440: 288
# [125.16] 2162160: 320
